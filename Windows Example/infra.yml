- name: ensure ec2 instance
  hosts: localhost
  gather_facts: no
  tags: infra
  vars: 
    ec2_region: us-west-2 # plug your AWS region here
    ami_id: ami-8fd3f9bf # 2012r2 
          # ami-9dc9e3ad # 2008r2 
    instance_size: t2.medium
    ec2_key_name: mdavis-test-west # plug your existing keypair name here
  vars_files:
  - secrets.yml
  tasks:    
  - name: ensure VPC
    ec2_vpc:
      state: present
      cidr_block: 172.99.0.0/16
      region: "{{ ec2_region }}"
      internet_gateway: true
      resource_tags: 
        Name: WinAMI-Setup
      subnets:
      - cidr: 172.99.1.0/24
        resource_tags:
          Name: WinAMI-Subnet
      route_tables:
      - subnets:
        - 172.99.1.0/24
        routes:
        - dest: 0.0.0.0/0
          gw: igw
    register: vpc_result
    when: target_vpc_id is not defined and target_subnet_id is not defined

  - set_fact:
      target_vpc_id: '{{ vpc_result.vpc_id }}'
      target_subnet_id: '{{ vpc_result.subnets[0].id }}'
    when: target_vpc_id is not defined and target_subnet_id is not defined

  - name: ensure security group for WinRM/RDP access
    ec2_group:
      name: WinRM RDP
      description: Inbound WinRM/RDP 
      vpc_id: "{{ target_vpc_id }}"
      region: "{{ ec2_region }}"
      rules:
      - proto: tcp
        from_port: 5986
        to_port: 5986
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 3389
        to_port: 3389
        cidr_ip: 0.0.0.0/0
    register: winrm_sg
    when: admin_security_group_id is not defined

  - set_fact:
      admin_security_group_id: '{{ winrm_sg.group_id }}'
    when: admin_security_group_id is not defined

  - name: ensure running instance
    ec2:
      assign_public_ip: yes
      region: "{{ ec2_region }}"
      key_name: "{{ ec2_key_name }}"
      group_id:
      - "{{ admin_security_group_id }}"
      instance_type: "{{ instance_size }}"
      vpc_subnet_id: "{{ target_subnet_id }}"
      image: "{{ ami_id }}"
      wait: yes
      wait_timeout: 500
      exact_count: 1
      count_tag:
          Name: WinAMI-Instance
      instance_tags:
          Name: WinAMI-Instance
      user_data: "{{ lookup('template', 'userdata.txt.j2') }}" # template the password in at runtime
    register: ec2_host_result

  - name: wait for winrm to start
    wait_for: port=5986 host={{ item.public_ip }} timeout=300
    with_items: ec2_host_result.tagged_instances

  - name: add new host to running inventory win group
    add_host: 
      name: WinAMI-Instance {{ item.id }}
      ansible_ssh_host: "{{ item.public_ip }}"
      groups: win
    with_items: ec2_host_result.tagged_instances
